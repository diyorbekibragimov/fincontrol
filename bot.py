import logging
from aiogram import (Bot, Dispatcher, executor)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContextProxy
from filters import (IsOwnerFilter, IsAdminFilter, MemberCanRestrictFilter)
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.types.reply_keyboard import ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from handlers.keyboards.inline.choice_buttons import (choice, confirm, operation, convert_currency, prompt_cancel_button)
from handlers.keyboards.inline.callback_data import (currency, convert_currency_data)
from config import (BOT_TOKEN, WEBHOOK_URL, WEBAPP_HOST, WEBAPP_PORT, WEBHOOK_PATH)
from functions import (converter as conv, sep)
from config import URL
from db import BotDB

# init
BotDB = BotDB()

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# activate filters
dp.filters_factory.bind(IsOwnerFilter)
dp.filters_factory.bind(IsAdminFilter)
dp.filters_factory.bind(MemberCanRestrictFilter)


converter = conv.RealTimeCurrencyConverter(URL)
separator = sep.Separator()

class Form(StatesGroup):
    operation = State()
    quantity = State()

class ConvertForm(StatesGroup):
    from_currency = State()
    change = State()
    quantity = State()
    to_currency = State()
    lastchange = State()

class CurrencyChange(StatesGroup):
    start = State()
    change = State()

class ChooseCurrency(StatesGroup):
    start = State()

def instructions(currency = None):
    text = ""
    if currency:
        text += f"<i>–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Ç–µ–ø–µ—Ä—å - <b>{currency}</b></i>\n\n"
    text += "<b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\n" \
            "/record - –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫\n" \
            "/currency - –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É\n" \
            "/history - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é\n" \
            "/convert - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç\n" \
            "/exrate - –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞"
    return text

@dp.message_handler(state=ChooseCurrency.start)
async def invalidCurrencyId(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if data["start"] == "change":
            await state.finish()
            await CurrencyChange.change.set()
            return await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?", reply_markup=confirm)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É",
                            reply_markup=choice)
# Handling all commands of bot
@dp.message_handler(state='*', commands = "start")
async def start(message: Message, state: FSMContext):
    await state.finish()

    if (not BotDB.user_exists(message.from_user.id)):
        await ChooseCurrency.start.set()
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É",
                            reply_markup=choice)
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.username}!")
        await message.answer(text=instructions())

@dp.message_handler(state='*', commands="history", commands_prefix="/")
async def history(message: Message, state=FSMContext):
    await state.finish()
    currencyData = BotDB.get_user_currency(user_id=message.from_user.id)
    currency = currencyData[1]
    records = BotDB.get_main_records(message.from_user.id)
    context = dict() # declaring a variable to save all data needed to display
    
    for (key, value) in records.items():
        profit = 0.0
        spending = 0.0
        total = 0.0

        for r in value:
            r = tuple(r)
            if r[0]: # check if operation is profit
                profit += float(r[1])
                total += float(r[1])
            else: # otherwise it is spending
                spending += float(r[1])
                total -= float(r[1])
        res = {
            "profit": "{:,.2f}".format(profit),
            "spending": "{:,.2f}".format(spending),
            "total": "{:,.2f}".format(total)
        }
        context[key] = res
    shortcut = BotDB.get_user_currency(message.from_user.id)
    shortcut = shortcut[2]

    text = f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ - <b>{currency}</b>\n\n" \
            "<b>–í—ã–ø–∏—Å–∫–∞ –∑–∞ –¥–µ–Ω—å:</b>\n" \
            f"‚ûï –î–æ—Ö–æ–¥ - <b>{context['day']['profit']}</b> <i>{shortcut}</i>\n" \
            f"‚ûñ –†–∞—Å—Ö–æ–¥ - <b>{context['day']['spending']}</b> <i>{shortcut}</i>\n" \
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{context['day']['total']}</b> <i>{shortcut}</i>\n\n" \
            "<b>–í—ã–ø–∏—Å–∫–∞ –∑–∞ –ù–µ–¥–µ–ª—é:</b>\n" \
            f"‚ûï –î–æ—Ö–æ–¥ - <b>{context['week']['profit']}</b> <i>{shortcut}</i>\n" \
            f"‚ûñ –†–∞—Å—Ö–æ–¥ - <b>{context['week']['spending']}</b> <i>{shortcut}</i>\n" \
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{context['week']['total']}</b> <i>{shortcut}</i>\n\n" \
            "<b>–í—ã–ø–∏—Å–∫–∞ –∑–∞ –ú–µ—Å—è—Ü–≤:</b>\n" \
            f"‚ûï –î–æ—Ö–æ–¥ - <b>{context['month']['profit']}</b> <i>{shortcut}</i>\n" \
            f"‚ûñ –†–∞—Å—Ö–æ–¥ - <b>{context['month']['spending']}</b> <i>{shortcut}</i>\n" \
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{context['month']['total']}</b> <i>{shortcut}</i>\n"
            
    await message.answer(text)
    await message.answer(text=instructions())

@dp.message_handler(state='*', commands = ("currency"), commands_prefix="/")
async def handleCurrencyCommand(message: Message, state: FSMContext):
    await state.finish()
    await CurrencyChange.start.set()
    result = BotDB.get_user_currency(user_id=message.from_user.id)
    currency = result[1]
    await message.answer(text=f"–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ - <b>{currency}</b>\n" \
                            "–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É?", reply_markup=confirm)

@dp.message_handler(Text(equals=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]), state=CurrencyChange.start)
async def handleConfirmBtn(message: Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        await ChooseCurrency.start.set()
        async with state.proxy() as data:
            data["start"] = "change"
        await message.answer(text="‚úÖ –û—Ç–ª–∏—á–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É",
                            reply_markup=choice)
    else:
        await state.finish()
        await message.answer(text=instructions(), reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=CurrencyChange.start)
async def invalidResponse(message: Message, state: FSMContext):
    await state.finish()
    await message.answer(text=instructions(), reply_markup=ReplyKeyboardRemove())

@dp.message_handler(Text(equals=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]), state=CurrencyChange.change)
async def handleConfirmCurrencyButton(message: Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        await state.finish()
        await message.answer(text=instructions(), reply_markup=ReplyKeyboardRemove())
    else:
        await ChooseCurrency.start.set()
        async with state.proxy() as data:
            data["start"] = "change"
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É", reply_markup=choice)

# Handling queries to choose the main curreny for user
@dp.callback_query_handler(currency.filter(item_id='1'), state=ChooseCurrency.start)
async def process_callback_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    await query.answer(cache_time=60)
    await state.finish()
    if (not BotDB.user_exists(query.from_user.id)):
        BotDB.add_user(user_id=query.from_user.id, main_currency = callback_data['item_id'])
        await query.message.edit_text(text=instructions())
    else:
        currency = BotDB.get_user_currency(user_id=query.from_user.id)
        prevExrate = currency[3]
        newExrate = "USD"
        BotDB.edit_currency(user_id=query.from_user.id, main_currency=callback_data['item_id'], prev_exrate=prevExrate, new_exrate=newExrate)
        await query.message.edit_text(text=instructions(currency="–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä"))

@dp.callback_query_handler(currency.filter(item_id='2'), state=ChooseCurrency.start)
async def process_callback_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    await query.answer(cache_time=60)
    await state.finish()
    if (not BotDB.user_exists(query.from_user.id)):
        BotDB.add_user(user_id=query.from_user.id, main_currency = callback_data['item_id'])
        await query.message.edit_text(text=instructions())
    else:
        currency = BotDB.get_user_currency(user_id=query.from_user.id)
        prevExrate = currency[3]
        newExrate = "UZS"
        BotDB.edit_currency(user_id=query.from_user.id, main_currency=callback_data['item_id'], prev_exrate=prevExrate, new_exrate=newExrate)
        await query.message.edit_text(text=instructions(currency="–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º"))

@dp.callback_query_handler(currency.filter(item_id='3'), state=ChooseCurrency.start)
async def process_callback_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    await query.answer(cache_time=60)
    await state.finish()
    if (not BotDB.user_exists(query.from_user.id)):
        BotDB.add_user(user_id=query.from_user.id, main_currency = callback_data['item_id'])
        await query.message.edit_text(text=instructions())
    else:
        currency = BotDB.get_user_currency(user_id=query.from_user.id)
        prevExrate = currency[3]
        newExrate = "KGS"
        BotDB.edit_currency(user_id=query.from_user.id, main_currency=callback_data['item_id'], prev_exrate=prevExrate, new_exrate=newExrate)
        await query.message.edit_text(text=instructions(currency="–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º"))

@dp.message_handler(commands=("record"), commands_prefix="/", state="*")
async def record(message: Message, state: FSMContext):
    await state.finish()
    await Form.operation.set()
    await message.answer("–ö–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?", reply_markup=operation)

@dp.message_handler(lambda message: message.text not in ["‚ûï –ü—Ä–∏–±—ã–ª—å", "‚ûñ –ó–∞—Ç—Ä–∞—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞"], state=Form.operation)
async def process_record_invalid(message: Message):
    return await message.reply("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫")

@dp.message_handler(state=Form.operation)
async def process_operation(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
        await message.answer(text=instructions())
        return await state.finish()
    async with state.proxy() as data:
        data["operation"] = message.text
    await Form.next()
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", reply_markup=prompt_cancel_button)

@dp.callback_query_handler(currency.filter(item_id=0), state=Form.quantity)
async def handlePromptCancel(query: CallbackQuery, state: FSMContext):
    await state.finish()
    await query.message.edit_text(text=instructions())

@dp.message_handler(regexp=r"\d+(?:.\d+)?", state=Form.quantity)
async def process_quantity(message: Message, state: FSMContext):
    operation = ""
    res = 0.0
    if message.text.count(",") > 0:
        try:
            res += separator.format_number(message.text)
        except ValueError:
            return await message.reply("‚ùå –ù–µ–≤–æ–∑–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É")
    else:
        res += round(float(message.text), 2)
    async with state.proxy() as data:
        data["quantity"] = res
        operation = "+" if data["operation"].count("–ü—Ä–∏–±—ã–ª—å") != 0 else "-"
    BotDB.add_record(message.from_user.id, operation, res)
    await message.answer("‚úÖ –°—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!")
    await message.answer(text=instructions())
    # Finish the state
    await state.finish()

@dp.message_handler(state=Form.quantity)
async def process_record_invalid(message: Message):
    return await message.reply("‚ùå –ù–µ–≤–æ–∑–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É")

@dp.message_handler(state='*', commands=("exrate"), commands_prefix="/")
async def show_exrate(message: Message, state: FSMContext):
    await state.finish()

    data = converter.show_exrate(["UZS", "KGS"])
    uzs = "{:,.2f}".format(data[0])
    kgs = "{:,.2f}".format(data[1])
    text = f"\U0001F1FA\U0001F1F8 1 USD - \U0001F1FA\U0001F1FF {uzs} UZS\n" \
            f"\U0001F1FA\U0001F1F8 1 USD - \U0001F1F0\U0001F1EC {kgs} KGS"
    await message.answer(text)

@dp.message_handler(state='*', commands=("convert"), commands_prefix="/")
async def convert(message: Message, state: FSMContext):
    await state.finish()
    await ConvertForm.from_currency.set()
    await message.answer(text="–ò–∑ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?", reply_markup=convert_currency)

@dp.callback_query_handler(convert_currency_data.filter(exchange_rate="None"), state=ConvertForm.from_currency)
async def handleCancelCurrency(query: CallbackQuery, state: FSMContext):
    await state.finish()
    await query.message.edit_text(text=instructions())

@dp.callback_query_handler(convert_currency_data.filter(exchange_rate="USD"), state=ConvertForm.from_currency)
async def process_from_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    await query.answer(cache_time=60)
    async with state.proxy() as data:
        data["from_currency"] = callback_data['exchange_rate']
    await ConvertForm.quantity.set()
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", reply_markup=prompt_cancel_button) 

@dp.callback_query_handler(convert_currency_data.filter(exchange_rate="UZS"), state=ConvertForm.from_currency)
async def process_from_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    await query.answer(cache_time=60)
    async with state.proxy() as data:
        data["from_currency"] = callback_data['exchange_rate']
    await ConvertForm.quantity.set()
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", reply_markup=prompt_cancel_button) 

@dp.callback_query_handler(convert_currency_data.filter(exchange_rate="KGS"), state=ConvertForm.from_currency)
async def process_from_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    await query.answer(cache_time=60)
    async with state.proxy() as data:
        data["from_currency"] = callback_data['exchange_rate']
    await ConvertForm.quantity.set()
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", reply_markup=prompt_cancel_button)

@dp.message_handler(state=ConvertForm.from_currency)
async def invalidConvertFormResponse(message: Message):
    await ConvertForm.next()
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?", reply_markup=confirm)

@dp.message_handler(Text(equals=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]), state=ConvertForm.change)
async def handleConfirmConvertForm(message: Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        await state.finish()
        await message.answer(text=instructions(), reply_markup=ReplyKeyboardRemove())
    else:
        await ConvertForm.previous()
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        await message.answer(text="–ò–∑ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã?", reply_markup=convert_currency)

@dp.message_handler(state=ConvertForm.change)
async def invalidConfirmFormResponse(message: Message):
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?")

@dp.callback_query_handler(currency.filter(item_id=0), state=ConvertForm.quantity)
async def handleCancelQuantity(querry: CallbackQuery, state: FSMContext):
    await state.finish()
    await querry.message.edit_text(text=instructions())

@dp.message_handler(regexp=r"\d+(?:.\d+)?", state=ConvertForm.quantity)
async def process_quantity(message: Message, state: FSMContext):
    amount = 0.0
    if message.text.count(",") > 0:
        try:
            amount += separator.format_number(message.text)
        except ValueError:
            return await message.reply("‚ùå –ù–µ–≤–æ–∑–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É")
    else:
        amount += round(float(message.text), 2)
    
    async with state.proxy() as data:
        data["quantity"] = amount
    await ConvertForm.next()
    await message.answer("–í –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?",  reply_markup=convert_currency)

@dp.message_handler(state=ConvertForm.quantity)
async def process_invalid_quantity(message: Message):
    return await message.reply("‚ùå –ù–µ–≤–æ–∑–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É")

@dp.callback_query_handler(convert_currency_data.filter(exchange_rate="None"), state=ConvertForm.to_currency)
async def handleCancelCurrency(query: CallbackQuery, state: FSMContext):
    await state.finish()
    await query.message.edit_text(text=instructions())

@dp.callback_query_handler(convert_currency_data.filter(exchange_rate="USD"), state=ConvertForm.to_currency)
async def process_to_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    amount = 0.0
    text = ""
    async with state.proxy() as data:
        data["to_currency"] = callback_data["exchange_rate"]
        amount += converter.convert(data["from_currency"], data["to_currency"], data["quantity"])
        from_quantity = "{:,.2f}".format(data["quantity"])
        amount = "{:,.2f}".format(amount)
        text += "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n" \
                f"<b>{from_quantity}</b> {data['from_currency']} = <b>{amount}</b> {data['to_currency']}"
    await query.message.edit_text(text=text)
    await state.finish()

@dp.callback_query_handler(convert_currency_data.filter(exchange_rate="UZS"), state=ConvertForm.to_currency)
async def process_to_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    amount = 0.0
    text = ""
    async with state.proxy() as data:
        data["to_currency"] = callback_data["exchange_rate"]
        amount += converter.convert(data["from_currency"], data["to_currency"], data["quantity"])
        from_quantity = "{:,.2f}".format(data["quantity"])
        amount = "{:,.2f}".format(amount)
        text += "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n" \
                f"<b>{from_quantity}</b> {data['from_currency']} = <b>{amount}</b> {data['to_currency']}"
    await query.message.edit_text(text=text)
    await state.finish()

@dp.callback_query_handler(convert_currency_data.filter(exchange_rate="KGS"), state=ConvertForm.to_currency)
async def process_to_currency(query: CallbackQuery, callback_data: dict, state: FSMContext):
    amount = 0.0
    text = ""
    async with state.proxy() as data:
        data["to_currency"] = callback_data["exchange_rate"]
        amount += converter.convert(data["from_currency"], data["to_currency"], data["quantity"])
        from_quantity = "{:,.2f}".format(data["quantity"])
        amount = "{:,.2f}".format(amount)
        text += "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n" \
                f"<b>{from_quantity}</b> {data['from_currency']} = <b>{amount}</b> {data['to_currency']}"
    await query.message.edit_text(text=text)
    await state.finish()

@dp.message_handler(state=ConvertForm.to_currency)
async def invalidConvertFormToCurrencyResponse(message: Message):
    await ConvertForm.next()
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?", reply_markup=confirm)

@dp.message_handler(Text(equals=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]), state=ConvertForm.lastchange)
async def handleConfirmConvertForm(message: Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        await state.finish()
        await message.answer(text=instructions(), reply_markup=ReplyKeyboardRemove())
    else:
        await ConvertForm.previous()
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        await message.answer(text="–í –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É?", reply_markup=convert_currency)

@dp.message_handler(state=ConvertForm.lastchange)
async def invalidConfirmConvertFormResponse(message: Message):
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?")

@dp.message_handler(state="*")
async def handleAnyCase(message: Message):
    await message.answer(text=instructions())

async def on_startup(dp):
    logging.warning(
        'Starting connection...')
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    logging.warning('Goodbye! Shutting down webhook connection')
    await bot.delete_webhook()

    # Close Redis connection.
    await dp.storage.close()
    await dp.storage.wait_closed()

def main():
    logging.basicConfig(level=logging.INFO)
    executor.start_webhook(dispatcher=dp, webhook_path=WEBHOOK_PATH, on_startup=on_startup, on_shutdown=on_shutdown,
                  skip_updates=True, host=WEBAPP_HOST, port=WEBAPP_PORT)

if __name__ == '__main__':
    main()